use mcl::bn::{G1, G2};
use mcl::common::Base;

use serde_json::json;

pub const DEFAULT_G1: &str = "1 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569";
// second generator on G1, used for Okamoto
pub const DEFAULT_G1_2: &str = "1 2144250947445192081071618466765046647019257686245947349033844530891338159027816696711238671324221321317530545114427 2665798332422762660334686159210698639947668680862640755137811598895238932478193747736307724249253853210778728799013";
pub const DEFAULT_G2: &str = "1 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582";

pub fn default_g1() -> G1 {
    G1::from_str(DEFAULT_G1, Base::Dec)
}

pub fn default_g1_2() -> G1 {
    G1::from_str(DEFAULT_G1_2, Base::Dec)
}

pub fn default_g2() -> G2 {
    G2::from_str(DEFAULT_G2, Base::Dec)
}

pub fn get_server(key: &str) -> String
{
    json!({
        "adam_b": "http://localhost:42080",
        "rafal_r": "http://rrothenberger.thenflash:4000",
    })[key].as_str().unwrap().to_string()
}
